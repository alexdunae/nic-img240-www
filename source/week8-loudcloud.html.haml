---
title: Week 8 "Loudcloud" Assignment
---
.grid
  .content
    %h1 Week 8 "Loudcloud" Assignment

    %p
      We’re going to make something like
      = link_to 'Soundcloud', 'http://soundcloud.com'
      this week.  Users will be able to go to your app, listen to a few tracks and "Like" or comment on each track.

    %p
      We want our users to be able to interact with the site, but we don’t want to interupt playback when they do.  Instead, we’ll use Rails’ <code>remote</code> links and forms and a little bit of Javascript to let everything happen without a page reload.

    %p All the song data will come from a seed file. The Likes and Comments will be added by you via your web browser.

    %br

    %p
      It might be easiest for you to write all the view code in a single file first, then break out the partials as you progress. Your choice.

    %p
      = link_to 'Loudcloud: seeds.rb', 'https://gist.github.com/alexdunae/dde7e981b3aa90e2582d'
      (save to <code>db/seeds.rb</code>)

    %br
    %br

    %h2 Code quality – I’ll be watching for these...

    %ul
      %li Don’t use <code>return</code>, <code>true</code> or <code>false</code> unless you need to.
      %li Indent your code with two spaces. Make sure your indenting is appropriate. Don't have more than one blank line between blocks of code. (Get in touch if you need help configuring your text editor. This should be mostly automatic.)
      %li Commit in git regularly (after completing each feature is usually good) with informative commit messages.
      %li Add validations where they would be needed.
      %li Use <code>before_action</code> to cut down on duplicate code in controllers.

    %br
    %br



    %h2 Data

    %h4 A <code>Song</code> model

    %ul
      %li title (string, required)
      %li embed_code (text, required) – this is the HTML that renders the player.


    %h4 A <code>Like</code> model

    %ul
      %li song (references, required)


    %h4 A <code>Comment</code> model

    %ul
      %li song (references, required)
      %li body (text or string, required)

    %p (Remember to add the relationships in your models.)

    %br
    %br

    %h2 Routes and controllers

    %p We are going to have three controllers: <code>Songs</code>, <code>Likes</code> and <code>Comments</code>.

    %p The homepage should be <code>Songs#index</code>. This is the only HTML page that users will actually see.

    %p Limit your routes (using <code>only: []</code>) to the actions you implement.

    %p The <code>Likes</code> and <code>Comments</code> routes should be nested under the <code>Songs</code> route.

    %br
    %br

    %h2 Behaviour

    %p Your main page should do the following:

    %ul
      %li List all the songs
      %li Display each song’s Like count
      %li Let users Like a song
      %li Display each song’s Comments (the body and the date the comment was made, newest on top)
      %li Each song should have a comment form visible so people can comment right on the page
      %li Each comment should have a 'Mark as spam' link that deletes the comment.

    %p When someone clicks Like, the Like count should increase and be displayed on the page.

    %p When someone adds a comment it should be saved and then appear immediately at the top of the song’s comment list.

    %p When someone deletes a comment it should disappear immediately.

    %br
    %br

    %h2 Organizing your views

    %p Each song should be rendered with a <code>_song.html.erb</code> partial.

    %p Each comment should be rendered with a <code>_comment.html.erb</code> partial.

    %br
    %br


    %h2 Add some styles

    %p Add some styling. You can write it by hand or use something from a CSS framework.

    %ul
      %li= link_to 'Skeleton', 'http://getskeleton.com/'
      %li= link_to 'Pure.css', 'http://purecss.io/'


    %br
    %br

    %h3 Submit your work
    %p
      When you are done, push your work to Github. Then email me a link to your repository on Github:
      %a{href: 'mailto:alex@dunae.ca'} alex@dunae.ca
